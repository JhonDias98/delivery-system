version: '3.8'

services:
  # === INFRAESTRUTURA ===
  
  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: delivery-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - delivery-network

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: delivery-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - delivery-network

  # Redis
  redis:
    image: redis:7-alpine
    container_name: delivery-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - delivery-network

  # PostgreSQL
  postgres:
    image: postgres:14-alpine
    container_name: delivery-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: delivery_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
      # - ./infrastructure/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - delivery-network

  # === OBSERVABILIDADE ===
  
  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: delivery-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - delivery-network

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: delivery-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./infrastructure/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - delivery-network

  # Jaeger
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: delivery-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
      - "6831:6831/udp"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - delivery-network

  # === FERRAMENTAS ===
  
  # Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: delivery-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: delivery-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - delivery-network

  # === MICROSSERVIÃ‡OS ===
  
  # Restaurants Service
  restaurants-service:
    build:
      context: .
      dockerfile: restaurants-service/Dockerfile
    container_name: delivery-restaurants-service
    ports:
      - "8081:8081"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
    depends_on:
      - kafka
      - redis
      - postgres
      - jaeger
    networks:
      - delivery-network

  # Orders Service
  orders-service:
    build:
      context: .
      dockerfile: orders-service/Dockerfile
    container_name: delivery-orders-service
    ports:
      - "8082:8082"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
    depends_on:
      - kafka
      - redis
      - postgres
      - jaeger
    networks:
      - delivery-network

  # Delivery Service
  delivery-service:
    build:
      context: .
      dockerfile: delivery-service/Dockerfile
    container_name: delivery-delivery-service
    ports:
      - "8083:8083"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
    depends_on:
      - kafka
      - redis
      - postgres
      - jaeger
    networks:
      - delivery-network

  # Payments Service
  payments-service:
    build:
      context: .
      dockerfile: payments-service/Dockerfile
    container_name: delivery-payments-service
    ports:
      - "8084:8084"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
    depends_on:
      - kafka
      - redis
      - postgres
      - jaeger
    networks:
      - delivery-network

  # BFF Mobile
  bff-mobile:
    build:
      context: .
      dockerfile: bff-mobile/Dockerfile
    container_name: delivery-bff-mobile
    ports:
      - "8085:8085"
    environment:
      - RESTAURANTS_SERVICE_URL=http://restaurants-service:8081
      - ORDERS_SERVICE_URL=http://orders-service:8082
      - DELIVERY_SERVICE_URL=http://delivery-service:8083
      - PAYMENTS_SERVICE_URL=http://payments-service:8084
      - REDIS_HOST=redis
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
    depends_on:
      - restaurants-service
      - orders-service
      - delivery-service
      - payments-service
      - redis
      - jaeger
    networks:
      - delivery-network

volumes:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  redis-data:
  postgres-data:
  prometheus-data:
  grafana-data:

networks:
  delivery-network:
    driver: bridge

